#if !defined(_PRISM_COMMON_LIBDUMPANALUZER_LIBDUMPANALUZER_H)
#define _PRISM_COMMON_LIBDUMPANALUZER_LIBDUMPANALUZER_H

#include <string>
#include <map>
#include <QObject>
#include "PLSProcessInfo.h"

#if defined(Q_OS_WIN)
#include "windows/PLSSoftStatistic.h"
#endif

/*
Note: Only available on Windows platform

Only generate dump file in the dump_path directory.
eg: Launcher process, cam-session.exe, PRISMLiveStudio.exe ...
*/
LIBDUMPANALUZER_API void pls_catch_unhandled_exceptions(const std::string &process_name, const std::string &dump_path = "");

/*
Note: Only available on Windows platform

Generate dump file and send to nelo synchronously.
eg: Installer process ...

info.sync_send_dump		 true
info.dump_path;			 optional  Folder directory generated by dump file. Default path : USER_APP_PATH\\PRISMLiveStudio\\crashDump
info.prism_session		 required
info.prism_version;		 required
info.prism_session;		 required
info.project_name;		 required
info.process_name;		 required
info.logFrom;			 required
info.dump_type;			 required
*/
LIBDUMPANALUZER_API void pls_catch_unhandled_exceptions_and_send_dump(const ProcessInfo &info);

LIBDUMPANALUZER_API void pls_set_prism_user_id(const std::string &user_id);
LIBDUMPANALUZER_API void pls_set_prism_session(const std::string &prism_session);
LIBDUMPANALUZER_API void pls_set_prism_video_adapter(const std::string &video_adapter);
LIBDUMPANALUZER_API void pls_set_setup_session(const std::string &session);
LIBDUMPANALUZER_API void pls_set_prism_sub_session(const std::string &session);
LIBDUMPANALUZER_API void pls_set_prism_pid(const std::string &pid);

/*
Note: In PRISMLohher.exe use
 
1.Check whether a dump file is generated.
2.Analyze the stack through the dump file, and then send the dump data to nelo.
eg: PRISMLogger.exe ...

info.test_module_crash		 optional
info.sync_send_dump;		 optional
info.analysis_stack = true
info.dump_path;			 optional
info.dump_file;			 required
info.user_id;			 required
info.cpu_name;			 required
info.video_adapter_name;	 required
info.pid;			     required
info.prism_session		 required
info.prism_version;		 required
info.prism_session;		 required
info.project_name;		 required
info.process_name;		 required
info.logFrom;			 required
info.src			     optional
info.dump_type;			 required
info.block_timeout_s;    if the DumpType is DT_UI_BLOCK, this field be required
info.block_time_ms;		 if the DumpType is DT_UI_BLOCK, this field be required
*/
LIBDUMPANALUZER_API bool pls_wait_send_dump(ProcessInfo info);

#if defined(Q_OS_WIN)
LIBDUMPANALUZER_API bool pls_send_block_dump(ProcessInfo info);
LIBDUMPANALUZER_API std::vector<SoftInfo> pls_installed_software();

#elif defined(Q_OS_MACOS)
// TODO: - mac next
#endif

#endif // _PRISM_COMMON_LIBDUMPANALUZER_LIBDUMPANALUZER_H
